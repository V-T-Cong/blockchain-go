syntax = "proto3";

package node;

option go_package = "proto/nodepb";

// =========================
// Transaction Structure
// =========================

message Transaction {
  bytes sender = 1;
  bytes receiver = 2;
  double amount = 3;
  int64 timestamp = 4;
  bytes signature = 5;
}

// =========================
// Block Structure
// =========================

message Block {
  int64 height = 1;
  repeated Transaction transactions = 2;
  bytes merkleRoot = 3;
  bytes previousBlockHash = 4;
  bytes currentBlockHash = 5;
  int64 timestamp = 6;
}

// =========================
// Voting
// =========================

message Vote {
  string voterId = 1;
  int64 blockHeight = 2;
  bytes blockHash = 3;
  bool approved = 4;
}

// =========================
// Block Sync
// =========================

message BlockRequest {
  int64 height = 1;
}

message Empty {}

message Status {
  string message = 1;
  bool success = 2;
}

// =========================
// Node-to-Node Communication
// =========================

service NodeService {
  // Send a signed transaction to a node
  rpc SendTransaction(Transaction) returns (Status);

  // Leader proposes a block to followers
  rpc ProposeBlock(Block) returns (Status);

  // Follower votes on proposed block
  rpc VoteBlock(Vote) returns (Status);

  // Sync: Get block by height
  rpc GetBlock(BlockRequest) returns (Block);

  // Sync: Get the latest block
  rpc GetLatestBlock(Empty) returns (Block);
}
